(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{274:function(t,s,a){"use strict";a.r(s);var e=a(13),c=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"关于项目"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#关于项目"}},[t._v("#")]),t._v(" 关于项目")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("公司营销部门的需求")]),t._v(" "),s("p",[t._v("这个项目原本的初衷是为了小程序内的一个短期活动需求，这个需求极为简单，但预期在活动期间会有多次修改甚至，如果使用原生开发，后期维护成本不小，反复修改会反复的提交微信审核，费时费力不说而且活动需求说停就停没有理由，所以易于维护，减少提交次数，可以快速清理的 webview 就成了开发前选型首选的。")])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("技术选型和优缺点")]),t._v(" "),s("p",[t._v("因为历史和技术选型原因，公司前端团队项目大多是原生开发各顾各，除了各自承担的几个大项目的维护和开发，在日常中又需要接受其他部门又多又杂的小需求，小到一两个页面的 app 和小程序内的广告、营销、活动，大到十几个页面的工具型、业务型的网站、公众号等等，这些类型的项目要么生命周期短，要么需求开发周期短；app、小程序连平台审核的时间都不够，一个超轻量级的 web 是最合适解决问题的，市面上多有现成的 web 开发框架大多都大而全了一些，这些业务逻辑过于简单的需求完全没必要去使用它，我们只想要一个只有业务代码不要其他多余的东西、无需审核快上快下、加载速度又极快的成果物，但又不得不考虑到 web 在浏览器中天生的代码不安全易逆向的问题，一个可编译、易分割、工程化 webpack 脚手架必须安排")])])])}),[],!1,null,null,null);s.default=c.exports}}]);